name: Publish and Sign Container Image

on:
  schedule:
    - cron: '32 11 * * *'
  push: 
    branches: [ main ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
env:
  COSIGN_EXPERIMENTAL: 1
  IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    outputs:
      digest: ${{ steps.push-step.outputs.digest }}
      image-tags: ${{ steps.container_info.outputs.image-tags }}
      container_digest: ${{ steps.container_info.outputs.container_digest }}
      container_tags: ${{ steps.container_info.outputs.container_tags }}
      container_repos: ${{ steps.container_info.outputs.container_repos }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into ghcr.io
        uses: docker/login-action@master
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push container image
        id: push-step
        uses: docker/build-push-action@master
        with:
          push: true
          tags: ghcr.io/${{ github.repository }}:latest
          
      - name: Get container info
        id: container_info
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          export CONTAINER_DIGEST=$(make container-digest GITHUB_REF=${{ github.ref_name }})
          echo "::set-output name=container_digest::$CONTAINER_DIGEST"
          echo "::set-output name=container_tags::$(make container-tags CONTAINER_DIGEST="${CONTAINER_DIGEST}" | paste -s -d ',' -)"
          echo "::set-output name=container_repos::$(make container-repos CONTAINER_DIGEST="${CONTAINER_DIGEST}" | jq --raw-input . | jq --slurp -c)"
          
  sign:

    runs-on: ubuntu-latest
  
    needs: build
    
    permissions:
      packages: write
      id-token: write

    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: main

      - name: Log into ghcr.io
        uses: docker/login-action@master
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign the container image
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign ghcr.io/${{ github.repository }}@${{ needs.build.outputs.digest }}
          echo "::notice title=Verify signature::COSIGN_EXPERIMENTAL=1 cosign verify ghcr.io/${{ github.repository }}@${{ needs.build.outputs.digest }} | jq '.[0]'"
          echo "::notice title=Inspect signature bundle::COSIGN_EXPERIMENTAL=1 cosign verify ghcr.io/${{ github.repository }}@${{ needs.build.outputs.digest }} | jq '.[0].optional.Bundle.Payload.body |= @base64d | .[0].optional.Bundle.Payload.body | fromjson'"
          echo "::notice title=Inspect certificate::COSIGN_EXPERIMENTAL=1 cosign verify ghcr.io/${{ github.repository }}@${{ needs.build.outputs.digest }}| jq -r '.[0].optional.Bundle.Payload.body |= @base64d | .[0].optional.Bundle.Payload.body | fromjson | .spec.signature.publicKey.content |= @base64d | .spec.signature.publicKey.content' | openssl x509 -text"

  sbom:

    runs-on: ubuntu-latest
  
    needs: build
    
    permissions:
      packages: write
      id-token: write

    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: main
          
      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.11.0

      - name: Log into ghcr.io
        uses: docker/login-action@master
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Attach SBOM to image
        run: |
          syft "ghcr.io/${{ github.repository }}@${{ needs.build.outputs.digest }}" -o spdx-json=sbom-spdx.json
          cosign attest --predicate sbom-spdx.json "ghcr.io/${{ github.repository }}@${{ needs.build.outputs.digest }}"
          echo "::notice title=Verify SBOM attestation::COSIGN_EXPERIMENTAL=1 cosign verify-attestation ghcr.io/${{ github.repository }}@${{ needs.build.outputs.digest }} | jq '.payload |= @base64d | .payload | fromjson | select(.predicateType == \"cosign.sigstore.dev/attestation/v1\") | .predicate.Data | fromjson'"

  container-provenance:
    name: container-provenance
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        repo: ${{ fromJSON(needs.build.outputs.container_repos) }}

    steps:

      - name: Generate provenance for ${{ matrix.repo }}
        uses: philips-labs/slsa-provenance-action@v0.8.0
        with:
          command: generate
          subcommand: container
          arguments: --repository ${{ matrix.repo }} --output-path provenance.att --digest ${{ needs.build.outputs.container_digest }} --tags ${{ needs.build.outputs.container_tags }}
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Get slsa-provenance predicate
        run: |
          cat provenance.att | jq .predicate > provenance-predicate.att
